# @version ">=2.0"

refs:
    prefix: "refs/envs/"

tasks:
    env.refs.remote.push:
        help: Push the refs to remote
        unless: !refs.local.exists(target_env)
        opts:
            remote:
        args:
            target_env: ?
        do:
            - $(refs.fmt.git_remote_push(target_env, remote))
    env.refs.remote.fetch:
        help: Fetch the refs from the remote
        unless: !refs.remote.exists(target_env, remote)
        opts:
            remote:
        args:
            target_env: ?
        do:
            - $(refs.fmt.git_remote_fetch(target_env, remote))
    env.refs.show:
        help: Prints matching refs (tags, branches etc.) that match the same tree as the ref.
        args:
            target_env: ?
        do: |
            REF_PATH="$(refs.path(target_env))"
            TREE=$$(git rev-parse $$(git show-ref --hash $REF_PATH)^{tree})
            echo -e "Checking for tree match of ref \033[0;32m$REF_PATH\033[0m (\033[0;33m$TREE\033[0m)."
            [[ "$(VERBOSE)" ==  1 ]] && git log --color $REF_PATH -n1 --pretty=format:"Commit:  %H%nTree:    %T%nDate:    %ci%nAuthor:  %ae%nSubject: %s%n"
            for i in $$(git for-each-ref --format='%(objectname)%(refname)'); do
                if [ "$TREE" == "$$(git rev-parse ${i:0:40}^{tree})" ]; then
                  echo -e "\033[0;33m${i:0:40}\033[0m ${i:40}";
                fi
            done || exit 0
    env.refs.history:
        help: Prints matching refs (tags, branches etc.) form the ref timeline.
        opts:
            offset:
            limit:
        args:
            target_env: ?
        do: |
            REF_PATH="$(refs.path(target_env))"
            for REF in $$(git rev-list $(offset ? sprintf("--skip=%s", offset))  $(limit ? sprintf("--max-count=%s", limit)) $REF_PATH); do
                REF_TREE=$$(git rev-parse $REF^{tree})
                echo -e "Checking for tree match of ref \033[0;32m$REF_PATH(${REF:0:10})\033[0m (\033[0;33m$REF_TREE\033[0m)."
                [[ "$(VERBOSE)" ==  1 ]] && git log --color $REF -n1 --pretty=format:"Commit:  %H%nTree:    %T%nDate:    %ci%nAuthor:  %ae%nSubject: %s%n"
                for i in $$(git for-each-ref --format='%(objectname)%(refname)'); do
                    if [ "$REF_TREE" == "$$(git rev-parse ${i:0:40}^{tree})" ]; then
                      echo -e "\033[0;33m${i:0:40}\033[0m ${i:40}";
                    fi
                done
                echo ""
            done || exit 0
    env.refs.diff:
        help: Prints the diff from a env ref (or create path).
        flags:
            patch: false
        args:
            target_env: ?
        do: git diff-index $(patch ? "--patch --minimal ")$$(git rev-parse $(refs.path(target_env))^{tree})
    deploy:
        args:
            ref_message: sprintf("[z] new ref for %s", build.version)
        opts:
            remote:
        pre:
            - $(tasks.env.refs.remote.fetch)
        post:
            - $(refs.fmt.git_update_ref(ref_message, build.version, target_env))
            - $(refs.fmt.git_remote_push(target_env, remote))
